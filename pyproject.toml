[project]
name = "synapse_super_invites"
description = "Provides extended support for users to invite other users to rooms via an inventation token"
readme = "README.md"

dynamic = ["version"]


requires-python = ">=3.8"

classifiers = [
  "License :: OSI Approved :: Apache Software License"
]

dependencies = [
  "matrix-synapse",
  "sqlalchemy",
  "alembic",
  "attrs"
]

[project.optional-dependencies]
dev = [
  # for tests
  "tox",
  "twisted",
  "matrix_synapse_testutils",
  # for type checking
  "mypy == 1.6.1",
  # for linting
  "black == 23.10.0",
  "ruff == 0.1.1",
  # for publishing
  "build",
  "twine"
]

[project.urls]
Homepage = "https://www.acter.global/"
Repository = "https://github.com/acterglobal/synapse-super-invites/"

[build-system]
requires = [
  "setuptools",
  "wheel",
  "setuptools_scm",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]


[tool.setuptools.dynamic]
version = {attr = "synapse_super_invites.__version__"}

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["attr-defined", "index", "union-attr"]

[tool.ruff]
line-length = 88

# See https://docs.astral.sh/ruff/rules/#error-e
# for error codes. The ones we ignore are:
#  E501: Line too long (black enforces this for us)
#  E731: do not assign a lambda expression, use a def
#
# flake8-bugbear compatible checks. Its error codes are described at
# https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
#  B023: Functions defined inside a loop must not use variables redefined in the loop
ignore = [
    "B023",
    "E501",
    "E731",
]
select = [
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # flake8-bugbear
    "B0",
    # flake8-comprehensions
    "C4",
    # flake8-2020
    "YTT",
    # flake8-slots
    "SLOT",
    # flake8-debugger
    "T10",
    # flake8-pie
    "PIE",
    # flake8-executable
    "EXE",
    # isort
    "I",
]
